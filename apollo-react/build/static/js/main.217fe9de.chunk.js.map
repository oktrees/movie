{"version":3,"sources":["component/Movie.js","routes/Home.js","routes/Detail.js","component/App.js","reportWebVitals.js","apollo.js","index.js"],"names":["LIKE_MOVIE","gql","id","bg","isLiked","useMutation","variables","parseInt","Container","to","Poster","styled","div","props","GET_MOVIES","useQuery","loading","data","Header","Title","Subtitle","Loading","Movies","movies","map","m","Movie","medium_cover_image","header","h1","h3","GET_MOVIE","useParams","Column","movie","title","rating","Description","description_intro","h4","p","App","exact","path","component","Home","Detail","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","resolvers","Mutation","toggleLikeMovie","_","cache","writeData","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.217fe9de.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { gql } from \"apollo-boost\";\nimport { useMutation } from \"@apollo/react-hooks\"\n\nconst LIKE_MOVIE = gql`\n  mutation toggleLikeMovie($id: Int!, $isLiked: Boolean!) {\n    toggleLikeMovie(id: $id, isLiked: $isLiked) @client\n  }\n`\n\nexport default ({ id, bg, isLiked }) => {\n  const [toggleLikeMovie] = useMutation(LIKE_MOVIE, { \n    variables: { id: parseInt(id), isLiked }\n  })\n  return (\n    <Container>\n      <Link to={`/${id}`}>\n        <Poster bg={bg} />\n      </Link>\n    </Container>\n  );\n};\n\n\n\nconst Container = styled.div`\n  height: 400px;\n  border-radius: 7px;\n  width: 100%;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n  background-color: transparent;\n`;\n\nconst Poster = styled.div`\n  background-image: url(${props => props.bg});\n  height: 100%;\n  width: 100%;\n  background-size: cover;\n  background-position: center center;\n  border-radius: 7px;\n`;","import React from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport styled from \"styled-components\"\n\nimport Movie from \"../component/Movie\";\n\nconst GET_MOVIES = gql`\n  {\n    movies {\n      id\n      medium_cover_image\n      isLiked @client\n    }\n  }\n`;\n\nexport default () => {\n  const { loading, data } = useQuery(GET_MOVIES);\n  return (\n    <Container>\n      <Header>\n        <Title>영화소개 사이트</Title>\n        <Subtitle>Apollo, GraphQL 테스트 페이지입니다.</Subtitle>\n      </Header>\n      {loading && <Loading>Loading...</Loading>}\n      <Movies>\n        {data?.movies?.map(m => (\n          <Movie\n            key={m.id}\n            id={m.id}\n            isLiked={m.isLiked}\n            bg={m.medium_cover_image}\n          />\n        ))}\n      </Movies>\n    </Container>\n  );\n};\n\n\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n`;\n\nconst Header = styled.header`\n  background-image: linear-gradient(-45deg, #d754ab, #fd723a);\n  height: 45vh;\n  color: white;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n`;\n\nconst Title = styled.h1`\n  font-size: 60px;\n  font-weight: 600;\n  margin-bottom: 20px;\n`;\n\nconst Subtitle = styled.h3`\n  font-size: 30px;\n`;\n\nconst Loading = styled.div`\n  font-size: 18px;\n  opacity: 0.5;\n  font-weight: 500;\n  margin-top: 10px;\n`;\n\nconst Movies = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-gap: 25px;\n  width: 60%;\n  position: relative;\n  top: -50px;\n  @media screen and (max-width: 1024px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`;","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\"; \nimport styled from \"styled-components\";\n\nconst GET_MOVIE = gql`\n  query getMovie($id: Int!) {\n    movie(id: $id) {\n      id\n      title\n      medium_cover_image\n      language\n      rating\n      description_intro\n      isLiked @client\n    }\n    suggestions(id: $id){\n      id\n      medium_cover_image\n    }\n  }\n`;\n\n\nexport default () => {\n  const { id } = useParams();\n  const { loading, data } = useQuery(GET_MOVIE, {\n    variables: { id: parseInt(id) }\n  });\n  return (\n    <Container>\n      <Column>\n        <Title>\n          {loading\n            ? \"Loading...\"\n            : `${data.movie.title}`}\n        </Title>\n        <Subtitle>\n            평점 : {data?.movie?.rating}\n        </Subtitle>\n        <Description>{data?.movie?.description_intro}</Description>\n      </Column>\n      <Poster bg={data?.movie ? data.movie.medium_cover_image : \"\"}></Poster>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  height: 100vh;\n  background-image: linear-gradient(-45deg, #d754ab, #fd723a);\n  width: 100%;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  color: white;\n`;\n\nconst Column = styled.div`\n  margin-left: 10px;\n  width: 50%;\n`;\n\nconst Title = styled.h1`\n  font-size: 65px;\n  margin-bottom: 15px;\n`;\n\nconst Subtitle = styled.h4`\n  font-size: 35px;\n  margin-bottom: 10px;\n`;\n\nconst Description = styled.p`\n  font-size: 28px;\n`;\n\nconst Poster = styled.div`\n  width: 25%;\n  height: 60%;\n  background-color: transparent;\n  background-image: url(${props => props.bg});\n  background-size: cover;\n  background-position: center center;\n`;","import { HashRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"../routes/Home\";\nimport Detail from \"../routes/Detail\";\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/:id\" component={Detail} />\n    </Router>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ApolloClient from \"apollo-boost\";\n\nconst client = new ApolloClient({\n  uri: \"https://movie.cndbook.com/\",\n  resolvers: {\n    Movie: {\n      isLiked: () => false\n    },\n    Mutation: {\n      toggleLikeMovie: (_, { id, isLiked }, { cache }) => {\n        cache.writeData({ \n          id: `Movie:${id}`, \n          data: {\n            isLiked: !isLiked,\n          }\n        });\n      },\n    }\n  }\n});\n\nexport default client;  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './component/App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport client from './apollo';\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}